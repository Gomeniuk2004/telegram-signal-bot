import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
import random
from datetime import datetime

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –î–∞–Ω—ñ –¥–ª—è –≤–∏–±–æ—Ä—É
PAIRS = ["EURUSD=X", "GBPUSD=X", "USDJPY=X", "BTC-USD", "ETH-USD"]  # –ø—Ä–∏–∫–ª–∞–¥ OTC –ø–∞—Ä–∏ —Ç–µ–∂ —î
TIMEFRAMES = ["1–º", "3–º", "5–º", "15–º"]

# –Ü—Å—Ç–æ—Ä—ñ—è —Å–∏–≥–Ω–∞–ª—ñ–≤ (–≤ –ø–∞–º‚Äô—è—Ç—ñ, –º–æ–∂–Ω–∞ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –≤ —Ñ–∞–π–ª —á–∏ –ë–î)
history = []

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(pair, callback_data=f"pair_{pair}") for pair in PAIRS]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í–∏–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç–Ω—É –ø–∞—Ä—É:', reply_markup=reply_markup)

async def pair_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    pair = query.data.split("_")[1]
    context.user_data['pair'] = pair

    keyboard = [
        [InlineKeyboardButton(tf, callback_data=f"tf_{tf}") for tf in TIMEFRAMES]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text=f"–í–∏ –æ–±—Ä–∞–ª–∏ –ø–∞—Ä—É: {pair}\n–û–±–µ—Ä—ñ—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º:", reply_markup=reply_markup)

async def tf_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    tf = query.data.split("_")[1]
    pair = context.user_data.get('pair')

    if not pair:
        await query.edit_message_text("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç–Ω—É –ø–∞—Ä—É /start")
        return

    # –ì–µ–Ω–µ—Ä—É—î–º–æ —Å–∏–≥–Ω–∞–ª –∑ –≤–∏–ø–∞–¥–∫–æ–≤–æ—é —Ç–æ—á–Ω—ñ—Å—Ç—é 70-80%
    accuracy = random.uniform(70, 80)
    time_in_minutes = int(tf[:-1])  # –≤–∏—Ç—è–≥—É—î–º–æ —á–∏—Å–ª–æ –∑ —Ç–∞–π–º—Ñ—Ä–µ–π–º—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ '3–º' -> 3

    signal = f"üìà –°–∏–≥–Ω–∞–ª –¥–ª—è {pair} | –¢–∞–π–º—Ñ—Ä–µ–π–º: {tf}\n–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ —É–≤—ñ–π—Ç–∏ –Ω–∞ {time_in_minutes} —Ö–≤–∏–ª–∏–Ω\n–¢–æ—á–Ω—ñ—Å—Ç—å —Å–∏–≥–Ω–∞–ª—É: {accuracy:.2f}%"

    # –ó–∞–ø–∏—Å—É—î–º–æ –≤ —ñ—Å—Ç–æ—Ä—ñ—é
    history.append({
        "pair": pair,
        "timeframe": tf,
        "accuracy": accuracy,
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    })

    await query.edit_message_text(signal)

async def history_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not history:
        await update.message.reply_text("–Ü—Å—Ç–æ—Ä—ñ—è —É–≥–æ–¥ –ø–æ—Ä–æ–∂–Ω—è.")
        return
    text = "–Ü—Å—Ç–æ—Ä—ñ—è —Å–∏–≥–Ω–∞–ª—ñ–≤:\n"
    for item in history[-10:]:  # –æ—Å—Ç–∞–Ω–Ω—ñ 10
        text += f"{item['timestamp']}: {item['pair']} | {item['timeframe']} | –¢–æ—á–Ω—ñ—Å—Ç—å: {item['accuracy']:.2f}%\n"
    await update.message.reply_text(text)

def main():
    token = "8091244631:AAHZRqn2bY3Ow2zH2WNk0J92mar6D0MgfLw"

    application = ApplicationBuilder().token(token).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(pair_handler, pattern=r"^pair_"))
    application.add_handler(CallbackQueryHandler(tf_handler, pattern=r"^tf_"))
    application.add_handler(CommandHandler("history", history_command))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    application.run_polling()

if __name__ == '__main__':
    main()
